## Daten:
# install.packages("CTRE")
daten1 <- CTRE::flares
daten2 <- CTRE::ctre(daten1)
magnitudes <- CTRE::magnitudes(daten2)
interarrival <- CTRE::interarrival(daten2)
summary(interarrival)
plot(cumsum(sort(interarrival,decreasing = F)))
plot(sort(interarrival,decreasing = F))
plot(sort(interarrival,decreasing = F) , log = "y")
plot(cumsum(sort(interarrival,decreasing = F)))
plot(cumsum(sort(interarrival,decreasing = F)), log = "y")
plot(cumsum(sort(interarrival,decreasing = F)))
plot(sort(interarrival,decreasing = F) , log = "y")
summary(magnitudes)
boxplot(magnitudes)
anyNA(magnitudes)
anyNA(interarrival)
str(interarrival)
?ctre::flares
?flares
head(interarrival)
56895/3600
45+60*50+13*3600
interarrival[1:20]
7+25*60+12*3600
38+25*60+3600
magnitudes[Ï1:10]
magnitudes[1:10]
magnitudes[1:20]
magnitudes[21:40]
hist(magnitudes)
q <- seq(0.90, 1 , 0.001)
u <- quantile(magnitudes, q , names = F); u
q <- seq(0.90, 0.999 , 0.001)
u <- quantile(magnitudes, q , names = F); u
2488*0.01
2488*0.001
2488*0.005
data <- cbind(magnitudes,interarrival)
fct_thin <- function(data , k=NULL , u=NULL){
JJ <- data[,1]
WW <- data[,2]
n <- length(JJ)
if(is.null(k) & is.null(u)){
stop("Es fehlt die Eingabe des Argumentes k oder u. Eins von beiden muss gegeben werden")
}
if(!is.null(k) & !is.null(u)){
k_1 <- sum(JJ>u)
if(k_1 != k){
stop("Die Anzahl der Ueberschreitungen ", k, " und der Threshold ", u, "passen nicht zusammen.
Geben Sie nur eins von beiden an")
}
}
if(is.null(k)){
k <- sum(JJ>u)
}
JJ <- data[,1]
WW <- data[,2]
n <- length(JJ)
if (k > n)
stop("Can't threshold to ", k, " observations if I only have ",
n)
idxJ <- sort(order(JJ, decreasing = TRUE)[1:k])
b <- rep(0 , times = n+1)
b[idxJ+1] <- 1
a <- (1+cumsum(b==1))[-length(b)]
newJJ <- JJ[idxJ]
newWW <- aggregate(WW , list(a) , sum)$x[1:k]
out <- cbind(newJJ,newWW)
return(out)
}
q <- seq(0.90, 0.999 , 0.001)
u <- quantile(data[,1], q , names = F); u
k <- sapply(u , function(x){sum(data[,1]>x)})
k <- sapply(u , function(x){sum(data[,1]>x)}); k
q*length(data[,1])
(1-q)*length(data[,1])
Tu <- sapply(k , function(x){fct_thin(data , k = x)})
View(Tu)
install.packages("extRemes")
CTREmodel <- sapply(k , function(x){fct_thin(data , k = x)}) # list
CTREmodel <- sapply(k , function(x){fct_thin(data , k = x)}) # list
fit_GP <- mapply( function(x,y){
z <- extRemes::fevd( x[,1]+u , threshold = y , type = "GP")
extRemes::ci(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
install.packages("fExtremes")
fit_GP <- mapply( function(x,y){
z <- fExtremes::fevd( x[,1]+u , threshold = y , type = "GP")
fExtremes::ci(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
fit_GP <- mapply( function(x,y){
z <- extRemes::fevd( x[,1]+u , threshold = y , type = "GP")
fExtremes::ci(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
fit_GP <- mapply( function(x,y){
z <- extRemes::fevd( x[,1]+u , threshold = y , type = "GP")
extRemes::ci.fevd(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
## functions: ####
fct_empfracmom <- function( q , data ){       # emp. frac. moment
r <- 1/(length(data))*sum(data^q)
return(r)       }
fit_GP <- mapply( function(x,y){
z <- extRemes::fevd( x[,1]+y , threshold = y , type = "GP")
extRemes::ci.fevd(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
warnings()
fit_GP
plot(q*100 , fit_GP[4,] , ylab = "" , xlab = "Threshold Quantile" , type = "o")
fit_GP <- mapply( function(x,y){
extRemes::fevd( x[,1]+y , threshold = y , type = "GP")
#z <- extRemes::fevd( x[,1]+y , threshold = y , type = "GP")
#extRemes::ci.fevd(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
fit_GP
str(fit_GP)
fit_GP$shape
?fevd
fit_GP <- mapply( function(x,y){
z <- extRemes::fevd( x[,1] , threshold = y , type = "GP")
extRemes::ci.fevd(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
fit_GP$results
plot(q*100 , fit_GP[4,] , ylab = "" , xlab = "Threshold Quantile" , type = "o")
extRemes::fevd( data[,1] , threshold = 100 , type = "GP")
str(extRemes::fevd( data[,1] , threshold = 100 , type = "GP"))
str(extRemes::fevd( data[,1] , threshold = 100 , type = "GP")$results)
str(extRemes::fevd( data[,1] , threshold = 100 , type = "GP")$results$par)
extRemes::fevd( data[,1] , threshold = 100 , type = "GP")$results$par
fit_GP <- mapply( function(x,y){
extRemes::fevd( x[,1] , threshold = y , type = "GP")$results$par
#z <- extRemes::fevd( x[,1] , threshold = y , type = "GP")
#extRemes::ci.fevd(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
fit_GP
plot(q*100 , fit_GP[2,] , ylab = "" , xlab = "Threshold Quantile" , type = "o")
fit_GP <- mapply( function(x,y){
extRemes::fevd( data[,1] , threshold = y , type = "GP")$results$par
#z <- extRemes::fevd( x[,1] , threshold = y , type = "GP")
#extRemes::ci.fevd(z , type = "parameter" , method = "boot")
} , CTREmodel , u)
plot(q*100 , fit_GP[2,] , ylab = "" , xlab = "Threshold Quantile" , type = "o")
fit_GP <- sapply( u , function(y){
extRemes::fevd( data[,1] , threshold = y , type = "GP")$results$par
#z <- extRemes::fevd( x[,1] , threshold = y , type = "GP")
#extRemes::ci.fevd(z , type = "parameter" , method = "boot")
})
plot(q*100 , fit_GP[2,] , ylab = "" , xlab = "Threshold Quantile" , type = "o")
q <- seq(0.80, 0.999 , 0.001)
u <- quantile(data[,1], q , names = F); u # vector
k <- sapply(u , function(x){sum(data[,1]>x)}); k # vector
CTREmodel <- sapply(k , function(x){fct_thin(data , k = x)}) # list
fit_GP <- sapply( u , function(y){
extRemes::fevd( data[,1] , threshold = y , type = "GP")$results$par
#z <- extRemes::fevd( x[,1] , threshold = y , type = "GP")
#extRemes::ci.fevd(z , type = "parameter" , method = "boot")
})
plot(q*100 , fit_GP[2,] , ylab = "" , xlab = "Threshold Quantile" , type = "o")
abline(h = 0.9 , col = "red")
abline(h = 0.95 , col = "red")
plot(q+100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" , type = "o")
shape <- 0.95
plot(q+100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" , type = "o")
plot(q*100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" , type = "o")
plot(q*100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" ,
type = "o" , ylim = c(-10,10))
plot(q*100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" ,
type = "o" , ylim = c(-100,100))
plot(q*100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" ,
type = "o" , ylim = c(-1000,1000))
plot(q*100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" ,
type = "o" , ylim = c(-10000,10000))
plot(q*100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" ,
type = "o" , ylim = c(-5000,5000))
plot(q*100 , fit_GP[1,]-shape*u, ylab = "scale" , xlab = "Threshold Quantile" ,
type = "o" , ylim = c(-100,5000))
shape <- extRemes::fevd( data[,1] , threshold = y , type = "GP")$results$par[2]
shape
shape <- extRemes::fevd( data[,1] , threshold = quantile(data[,1], 0.95 , names = F) , type = "GP")$results$par[2]
shape
scale <- extRemes::fevd( data[,1] , threshold = quantile(data[,1], 0.95 , names = F) ,
type = "GP")$results$par[1]; scale
